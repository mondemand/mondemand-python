# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mondemand', [dirname(__file__)])
        except ImportError:
            import _mondemand
            return _mondemand
        if fp is not None:
            try:
                _mod = imp.load_module('_mondemand', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mondemand = swig_import_helper()
    del swig_import_helper
else:
    import _mondemand
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def client_create(*args):
  return _mondemand.client_create(*args)
client_create = _mondemand.client_create

def client_destroy(*args):
  return _mondemand.client_destroy(*args)
client_destroy = _mondemand.client_destroy

def set_immediate_send_level(*args):
  return _mondemand.set_immediate_send_level(*args)
set_immediate_send_level = _mondemand.set_immediate_send_level

def set_no_send_level(*args):
  return _mondemand.set_no_send_level(*args)
set_no_send_level = _mondemand.set_no_send_level

def get_context(*args):
  return _mondemand.get_context(*args)
get_context = _mondemand.get_context

def get_context_keys(*args):
  return _mondemand.get_context_keys(*args)
get_context_keys = _mondemand.get_context_keys

def set_context(*args):
  return _mondemand.set_context(*args)
set_context = _mondemand.set_context

def remove_context(*args):
  return _mondemand.remove_context(*args)
remove_context = _mondemand.remove_context

def remove_all_contexts(*args):
  return _mondemand.remove_all_contexts(*args)
remove_all_contexts = _mondemand.remove_all_contexts

def add_transport(*args):
  return _mondemand.add_transport(*args)
add_transport = _mondemand.add_transport

def level_is_enabled(*args):
  return _mondemand.level_is_enabled(*args)
level_is_enabled = _mondemand.level_is_enabled

def flush_logs(*args):
  return _mondemand.flush_logs(*args)
flush_logs = _mondemand.flush_logs

def flush_stats(*args):
  return _mondemand.flush_stats(*args)
flush_stats = _mondemand.flush_stats

def reset_stats(*args):
  return _mondemand.reset_stats(*args)
reset_stats = _mondemand.reset_stats

def flush(*args):
  return _mondemand.flush(*args)
flush = _mondemand.flush

def log_level_from_string(*args):
  return _mondemand.log_level_from_string(*args)
log_level_from_string = _mondemand.log_level_from_string

def stat_type_from_string(*args):
  return _mondemand.stat_type_from_string(*args)
stat_type_from_string = _mondemand.stat_type_from_string

def initialize_trace(*args):
  return _mondemand.initialize_trace(*args)
initialize_trace = _mondemand.initialize_trace

def clear_trace(*args):
  return _mondemand.clear_trace(*args)
clear_trace = _mondemand.clear_trace

def get_trace(*args):
  return _mondemand.get_trace(*args)
get_trace = _mondemand.get_trace

def get_trace_keys(*args):
  return _mondemand.get_trace_keys(*args)
get_trace_keys = _mondemand.get_trace_keys

def set_trace(*args):
  return _mondemand.set_trace(*args)
set_trace = _mondemand.set_trace

def remove_trace(*args):
  return _mondemand.remove_trace(*args)
remove_trace = _mondemand.remove_trace

def remove_all_traces(*args):
  return _mondemand.remove_all_traces(*args)
remove_all_traces = _mondemand.remove_all_traces

def flush_trace(*args):
  return _mondemand.flush_trace(*args)
flush_trace = _mondemand.flush_trace

def transport_lwes_create(*args):
  return _mondemand.transport_lwes_create(*args)
transport_lwes_create = _mondemand.transport_lwes_create

def stats_inc(*args):
  return _mondemand.stats_inc(*args)
stats_inc = _mondemand.stats_inc

def stats_dec(*args):
  return _mondemand.stats_dec(*args)
stats_dec = _mondemand.stats_dec

def stats_set(*args):
  return _mondemand.stats_set(*args)
stats_set = _mondemand.stats_set
# This file is compatible with both classic and new-style classes.


